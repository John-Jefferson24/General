# ======================================================================
# OpenShift Security Context Fixes for Snorkel Flow
# ======================================================================
# This script removes ALL security context settings that conflict with 
# OpenShift Security Context Constraints (SCCs)
#
# Usage: .\fix-openshift-security.ps1 
# Optional: .\fix-openshift-security.ps1 -ChartPath "C:\path\to\chart"
# ======================================================================

param(
    [string]$ChartPath = "H:\oc\snorkelflow",
    [switch]$WhatIf = $false,
    [switch]$Verbose = $false
)

# Color functions for better output
function Write-Success { param($Message) Write-Host $Message -ForegroundColor Green }
function Write-Info { param($Message) Write-Host $Message -ForegroundColor Cyan }
function Write-Warning { param($Message) Write-Host $Message -ForegroundColor Yellow }
function Write-Error { param($Message) Write-Host $Message -ForegroundColor Red }
function Write-Detail { param($Message) Write-Host $Message -ForegroundColor Gray }

# Script header
Write-Host ""
Write-Host "===============================================" -ForegroundColor Magenta
Write-Host "  OpenShift Security Context Fixes" -ForegroundColor Magenta
Write-Host "  Snorkel Flow Helm Chart Compatibility" -ForegroundColor Magenta
Write-Host "===============================================" -ForegroundColor Magenta
Write-Host ""

Write-Info "üîß Starting OpenShift Security Context Fixes..."
Write-Info "üìÅ Chart Path: $ChartPath"

if ($WhatIf) {
    Write-Warning "üîç WHAT-IF MODE: No changes will be made, only showing what would be changed"
}

# Validate chart directory
$TemplatesPath = Join-Path $ChartPath "templates"

if (-not (Test-Path $ChartPath)) {
    Write-Error "‚ùå Chart directory not found: $ChartPath"
    Write-Error "Please ensure the Snorkel Flow chart directory exists"
    exit 1
}

if (-not (Test-Path $TemplatesPath)) {
    Write-Error "‚ùå Templates directory not found: $TemplatesPath"
    Write-Error "Please ensure this is a valid Helm chart directory"
    exit 1
}

Write-Success "‚úÖ Found templates directory: $TemplatesPath"

# Get all YAML files recursively
$YamlFiles = Get-ChildItem -Path $TemplatesPath -Filter "*.yaml" -Recurse
Write-Info "üìÅ Found $($YamlFiles.Count) YAML files to process across all subdirectories"

if ($Verbose) {
    Write-Info "üìÇ Directory structure:"
    Get-ChildItem -Path $TemplatesPath -Directory | ForEach-Object { 
        $fileCount = (Get-ChildItem -Path $_.FullName -Filter "*.yaml" -Recurse).Count
        Write-Detail "   ‚Ä¢ $($_.Name): $fileCount YAML files"
    }
}

# Create backup directory (skip in WhatIf mode)
if (-not $WhatIf) {
    $BackupPath = Join-Path $ChartPath "templates_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
    New-Item -ItemType Directory -Path $BackupPath -Force | Out-Null
    Write-Warning "üíæ Created backup directory: $BackupPath"
}

# Complete list of OpenShift-problematic security context settings
# Based on OpenShift Security Context Constraints documentation
$SecurityContextSettings = @{
    'User_Group_Identity' = @(
        'runAsUser',      # User ID - OpenShift assigns from namespace range
        'runAsGroup',     # Primary group ID - OpenShift assigns  
        'uid',            # Alternative user ID specification
        'gid',            # Group ID - OpenShift assigns
        'fsGroup',        # Filesystem group ownership - OpenShift assigns
        'supplementalGroups', # Additional groups - OpenShift manages
        'runAsNonRoot'    # OpenShift handles this automatically
    )
    'Privilege_Settings' = @(
        'privileged',           # Not allowed in restricted SCC
        'allowPrivilegeEscalation' # Restricted by default SCC
    )
    'Capabilities' = @(
        'capabilities',         # Linux capabilities
        'addCapabilities',      # Capabilities to add
        'dropCapabilities',     # Capabilities to drop
        'defaultAddCapabilities', # Default added capabilities
        'requiredDropCapabilities', # Required dropped capabilities
        'allowedCapabilities'   # Allowed capabilities list
    )
    'Security_Labels' = @(
        'seLinuxOptions',   # SELinux labels - OpenShift manages
        'appArmorProfile',  # AppArmor profiles - not used in OpenShift
        'seccompProfile'    # Seccomp profiles - OpenShift handles
    )
    'Filesystem_Settings' = @(
        'readOnlyRootFilesystem', # Can cause write permission errors
        'fsGroupChangePolicy'     # Filesystem group change policy
    )
    'Host_Access' = @(
        'hostNetwork',  # Host network access - not allowed in restricted SCC
        'hostPID',      # Host PID namespace - not allowed in restricted SCC
        'hostIPC',      # Host IPC namespace - not allowed in restricted SCC
        'hostPorts'     # Host port access - not allowed in restricted SCC
    )
    'Advanced_Settings' = @(
        'procMount',       # Proc mount settings
        'windowsOptions',  # Windows-specific settings
        'sysctls'         # Kernel parameter settings
    )
}

# Flatten all settings into one array for processing
$AllSettings = @()
$SecurityContextSettings.Values | ForEach-Object { $AllSettings += $_ }

Write-Info "üîç Will check for $($AllSettings.Count) different security context settings"

# Process each file
$TotalModified = 0
$TotalChanges = 0

foreach ($file in $YamlFiles) {
    $relativePath = $file.FullName.Replace($TemplatesPath, "").TrimStart('\')
    
    if ($Verbose) {
        Write-Host "üîß Processing: $relativePath" -ForegroundColor White
    }
    
    # Create backup with directory structure (skip in WhatIf mode)
    if (-not $WhatIf) {
        $relativeDir = Split-Path $relativePath -Parent
        if ($relativeDir) {
            $backupSubDir = Join-Path $BackupPath $relativeDir
            New-Item -ItemType Directory -Path $backupSubDir -Force | Out-Null
        }
        $backupFilePath = Join-Path $BackupPath $relativePath
        Copy-Item $file.FullName -Destination $backupFilePath -Force
    }
    
    # Read and process content
    $content = Get-Content $file.FullName
    $modified = $false
    $fileChanges = 0
    
    for ($i = 0; $i -lt $content.Length; $i++) {
        $line = $content[$i]
        
        # Check each security context setting
        foreach ($setting in $AllSettings) {
            if ($line -match "^\s*$setting\s*:") {
                if (-not $WhatIf) {
                    $content[$i] = $line -replace "(\s*)($setting\s*:)", '$1# $2 # Removed for OpenShift compatibility'
                }
                $modified = $true
                $fileChanges++
                $TotalChanges++
                
                if ($Verbose -or $WhatIf) {
                    Write-Detail "  ‚Ü≥ Line $($i+1): $setting"
                }
                break  # Only process one setting per line
            }
        }
        
        # Handle complete securityContext blocks that only contain restricted settings
        if ($line -match '^\s*securityContext:\s*$') {
            $currentIndent = ($line -replace '\S.*').Length
            $nextNonEmptyLine = $i + 1
            $hasOnlyRestrictedSettings = $true
            $hasAnySettings = $false
            
            # Look ahead to analyze this securityContext block
            while ($nextNonEmptyLine -lt $content.Length) {
                $nextLine = $content[$nextNonEmptyLine]
                
                # Skip empty lines
                if ($nextLine -match '^\s*$') {
                    $nextNonEmptyLine++
                    continue
                }
                
                # If we hit a line with same or less indentation, we're out of this block
                $nextIndent = ($nextLine -replace '\S.*').Length
                if ($nextIndent -le $currentIndent -and $nextLine -match '\S') {
                    break
                }
                
                # Check if this line is a setting
                if ($nextLine -match '^\s*(\w+)\s*:') {
                    $settingName = $Matches[1]
                    $hasAnySettings = $true
                    
                    # Check if this setting is in our restricted list
                    if ($settingName -notin $AllSettings) {
                        $hasOnlyRestrictedSettings = $false
                        break
                    }
                }
                
                $nextNonEmptyLine++
            }
            
            # If securityContext only has restricted settings, comment it out
            if ($hasAnySettings -and $hasOnlyRestrictedSettings) {
                if (-not $WhatIf) {
                    $content[$i] = $line -replace '(\s*)(securityContext:)', '$1# $2 # OpenShift will handle this automatically'
                }
                $modified = $true
                $fileChanges++
                $TotalChanges++
                
                if ($Verbose -or $WhatIf) {
                    Write-Detail "  ‚Ü≥ Line $($i+1): Complete securityContext block"
                }
            }
        }
    }
    
    # Write back if modified (skip in WhatIf mode)
    if ($modified) {
        if (-not $WhatIf) {
            $content | Set-Content $file.FullName -Encoding UTF8
        }
        $TotalModified++
        
        if ($WhatIf) {
            Write-Warning "  üìù Would modify: $relativePath ($fileChanges changes)"
        } elseif ($Verbose) {
            Write-Success "  ‚úÖ Updated: $relativePath ($fileChanges changes)"
        }
    } elseif ($Verbose) {
        Write-Detail "  ‚ÑπÔ∏è  No changes needed: $relativePath"
    }
}

# Summary
Write-Host ""
Write-Host "===============================================" -ForegroundColor Magenta
Write-Host "  SUMMARY" -ForegroundColor Magenta  
Write-Host "===============================================" -ForegroundColor Magenta

if ($WhatIf) {
    Write-Info "üîç WHAT-IF RESULTS:"
    Write-Info "   üìÅ Files that would be modified: $TotalModified"
    Write-Info "   üîß Total changes that would be made: $TotalChanges"
} else {
    Write-Success "üéâ OpenShift security fixes completed successfully!"
    Write-Success "   üìÅ Files modified: $TotalModified"
    Write-Success "   üîß Total changes made: $TotalChanges"
    
    if ($TotalModified -gt 0) {
        Write-Warning "   üíæ Backup created at: $BackupPath"
    }
}

Write-Host ""
Write-Info "üìã Security context settings addressed:"

# Display what was handled by category
foreach ($category in $SecurityContextSettings.Keys) {
    $categoryName = $category -replace '_', ' '
    Write-Warning "  üîπ $categoryName"
    $settings = $SecurityContextSettings[$category] -join ', '
    Write-Detail "     $settings"
}

Write-Host ""
Write-Info "üöÄ Next steps:"
Write-Host "1. Navigate to chart directory:" -ForegroundColor White
Write-Host "   cd `"H:\oc\snorkelflow`"" -ForegroundColor Gray

Write-Host "2. Uninstall existing deployment:" -ForegroundColor White  
Write-Host "   helm uninstall snorkelflow -n snorkelflow" -ForegroundColor Gray

Write-Host "3. Test template generation:" -ForegroundColor White
Write-Host "   helm template snorkelflow . | findstr /i `"runAsUser fsGroup privileged`"" -ForegroundColor Gray

Write-Host "4. Deploy with fixes:" -ForegroundColor White
Write-Host "   helm install snorkelflow . -n snorkelflow --create-namespace" -ForegroundColor Gray

Write-Host ""
Write-Info "üîç Verification commands:"
Write-Host 'helm template snorkelflow . | Select-String -Pattern "runAsUser|fsGroup|privileged" | Where-Object { $_.Line -notmatch "^\s*#" }' -ForegroundColor Gray
Write-Host "(Should return no uncommented security context settings)" -ForegroundColor DarkGray

Write-Host ""
if (-not $WhatIf -and $TotalModified -gt 0) {
    Write-Success "‚úÖ Your Snorkel Flow chart is now OpenShift compatible!"
} elseif ($WhatIf) {
    Write-Info "‚ÑπÔ∏è  Run without -WhatIf to apply these changes"
} else {
    Write-Success "‚úÖ No security context issues found - chart is already OpenShift compatible!"
}

Write-Host ""

# Optional: Show rollback instructions if changes were made
if (-not $WhatIf -and $TotalModified -gt 0) {
    Write-Host "üîÑ To rollback changes if needed:" -ForegroundColor DarkYellow
    Write-Host "   Remove-Item `"$TemplatesPath`" -Recurse -Force" -ForegroundColor DarkGray
    Write-Host "   Move-Item `"$BackupPath`" `"$TemplatesPath`"" -ForegroundColor DarkGray
    Write-Host ""
}
