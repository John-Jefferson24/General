jupyterhub:
    # Define non-default resource limits & requests
    resources: {}
    env: {}
    labels: {}
    # sensitive env vars will be set by passing filename instead of k8s SecretKeySelector
    secretsFromFile: false
    # Enable the in-platform notebook
    enabled: true
    
    # OpenShift compatibility
    containerSecurityContext: {}
    podSecurityContext: {}
    
    singleUserNotebook:
      # The name of the service account to bind to the single-user notebook pods
      serviceAccountName: snorkelflow-jupyterhub-user-sa
      # The start timeout of a single-user notebook pod, in seconds
      startTimeout: 300
      # Whether notebook pods should spin up with a GPU (gpu.gpu_config must be filled out)
      gpu: false
      # Whether to limit its minio access to its own user directory
      minio_user_dir_only: false
      # Defines the resources given to each user's notebook
      resources:
        cpu_guarantee: 1
        cpu_limit: 1
        memory_guarantee: 2G
        memory_limit: 8G
      storage:
        # The storage class to use for the persistent volume bound to the single-user notebook pod
        # Used when storage type is dynamic
        dynamicClass: "null"
        # The storage type to use (static/dynamic)
        type: dynamic
      
      # OpenShift compatibility settings
      securityContext: {}
      uid: null
      fsGid: null
      allowPrivilegeEscalation: false
      cloudMetadata:
        blockWithIptables: false
    
    # Hub configuration for OpenShift
    hub:
      containerSecurityContext: {}
      podSecurityContext: {}
      extraConfig:
        openshift_compatibility: |
          # Fix spawner for OpenShift
          c.KubeSpawner.uid = None
          c.KubeSpawner.fs_gid = None
          c.KubeSpawner.allow_privilege_escalation = False
          c.KubeSpawner.init_containers = []
          
          # Override spawn hook for OpenShift
          def openshift_spawn_hook(spawner):
              spawner.uid = None
              spawner.fs_gid = None
              spawner.allow_privilege_escalation = False
              spawner.service_account = 'snorkelflow-jupyterhub-user-sa'
              
              # Keep existing secret functionality
              volume_name = 'snorkel-api-key'
              mount_path = '/var/run/snorkelflow/api'
              spawner.volumes.append({
                  'name': volume_name,
                  'secret': {
                      'secretName': spawner._expand_user_properties(
                          'snorkel-api-key-{escaped_username}'
                      ),
                  },
              })
              spawner.volume_mounts.append({
                  'name': volume_name,
                  'mountPath': mount_path,
                  'readOnly': True,
              })
              spawner.environment['SNORKELFLOW_API_KEY_FILE'] = f'{mount_path}/key'
          
          c.Spawner.pre_spawn_hook = openshift_spawn_hook
