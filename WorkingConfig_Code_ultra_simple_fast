## MODEL ROUTING USING WSGI ##

# Global settings
ProxyRequests Off
ProxyPreserveHost On

# Define WSGI script for model extraction
WSGIScriptAlias "/" "/var/www/wsgi/model_router.py"

# WSGI directory permissions
<Directory "/var/www/wsgi">
    Require all granted
</Directory>

# Proxy configurations for each model
ProxyPass "/model/gpt-model-1" "http://triton1.internal/v1/chat/completions"
ProxyPass "/model/gpt-model-2" "http://triton2.internal/v1/chat/completions"
ProxyPass "/model/gpt-model-3" "http://triton3.internal/v1/chat/completions"
ProxyPass "/model/gpt-model-4" "http://triton4.internal/v1/chat/completions"
ProxyPass "/model/gpt-model-5" "http://triton5.internal/v1/chat/completions"

# Default proxy
ProxyPass "/" "http://triton1.internal/v1/chat/completions"

# CORS headers
Header always set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
Header always set Access-Control-Allow-Methods "POST, GET, OPTIONS"
Header always set Cache-Control "no-store"

#!/usr/bin/env python3
import json
import sys

def application(environ, start_response):
    # Get request method and content length
    method = environ.get('REQUEST_METHOD', 'GET')
    
    # Only process POST requests with content
    if method == 'POST':
        try:
            # Read the request body
            content_length = int(environ.get('CONTENT_LENGTH', 0))
            body = environ['wsgi.input'].read(content_length)
            
            # Parse the JSON
            data = json.loads(body)
            
            # Extract the model name
            model_name = data.get('model', '')
            
            # Determine the redirect URL based on model name
            redirect_url = '/'
            if model_name:
                redirect_url = f'/model/{model_name}'
            
            # Redirect to the appropriate endpoint
            start_response('307 Temporary Redirect', [
                ('Location', redirect_url),
                ('Content-Type', 'text/plain'),
            ])
            return [b'Redirecting to model endpoint']
            
        except Exception as e:
            # Log the error and continue to default endpoint
            sys.stderr.write(f"Error processing model: {str(e)}\n")
            start_response('307 Temporary Redirect', [
                ('Location', '/'),
                ('Content-Type', 'text/plain'),
            ])
            return [b'Error processing model, redirecting to default endpoint']
    
    # For non-POST requests or other cases, redirect to default
    start_response('307 Temporary Redirect', [
        ('Location', '/'),
        ('Content-Type', 'text/plain'),
    ])
    return [b'Redirecting to default endpoint']
