{{- $images := .Files.Get "images.json" | fromJson }}
{{- if and (ne .Values.observability.logging_stack "LEGACY") .Values.observability.exporters.prometheus.enabled  }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    always-pinned: "0"
    project: {{ .Values.projectName }}
    service: prometheus
    snorkel.ai/compute-type: cpu
{{- if or .Values.services.prometheus.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.prometheus.labels .Values.services.labels) | indent 4 }}
{{- end }}
  name: prometheus
  namespace: {{ .Values.projectName }}
spec:
  replicas: 1
{{- if .Values.services.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ .Values.services.progressDeadlineSeconds }}
{{- end }}
  selector:
    matchLabels:
      project: {{ .Values.projectName }}
      service: prometheus
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        always-pinned: "0"
        project: {{ .Values.projectName }}
        service: prometheus
        snorkel.ai/compute-type: cpu
{{- if or .Values.services.prometheus.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.prometheus.labels .Values.services.labels) | indent 8 }}
{{- end }}
    spec:
{{- if or .Values.affinity.binPackAlwaysPinnedPods .Values.affinity.nodeAffinity }}
      affinity:
        {{- if .Values.affinity.binPackAlwaysPinnedPods }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: always-pinned
                operator: In
                values:
                - "1"
            topologyKey: kubernetes.io/hostname
            namespaceSelector: {}
        {{- end }}
        {{- with .Values.affinity.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
      {{- with .Values.affinity.nodeSelectors }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - args: []
        env:
        - name: SERVICE_TYPE
          value: prometheus
        - name: SNORKEL_FLOW_VERSION
          value: "{{ .Values.version }}"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PROMETHEUS_USER_FILE
          value: /var/secrets/prometheus/prometheus-username
        - name: PROMETHEUS_PASSWORD_FILE
          value: /var/secrets/prometheus/prometheus-password
{{- range $k, $v := (merge .Values.services.prometheus.env .Values.services.env) }}
        - name: {{ $k }}
          value: {{ $v | toString | quote }}
{{- end }}
        {{- if .Values.image.imageNames.prometheus }}
        image: {{ .Values.image.imageNames.prometheus }}
        {{- else }}
        image: {{ template "snorkelflow.registryPrefix" . }}{{ $images.docker_hub_repo }}/{{ get $images.custom_images "prometheus" }}
        {{- end }}
        name: prometheus
        ports:
        - name: prometheus
          containerPort: 9090
          protocol: TCP
        resources:
{{- if .Values.services.prometheus.resources }}
{{ toYaml .Values.services.prometheus.resources | indent 10 }}
{{- else }}
          requests:
            memory: 2Gi
            cpu: "2.0"
          limits:
            memory: 2Gi
            cpu: "2.0"
{{- end }}
        livenessProbe:
          exec:
            command: ["promtool", "check", "healthy", "--http.config.file=/prometheus/prom-client-web-config.yaml"]
          periodSeconds: 10
          initialDelaySeconds: 2
        readinessProbe:
          exec:
            command: ["promtool", "check", "ready", "--http.config.file=/prometheus/prom-client-web-config.yaml"]
          periodSeconds: 10
        startupProbe:
          tcpSocket:
            port: prometheus
          periodSeconds: 10
{{- if .Values.services.prometheus.containerSecurityContext }}
        securityContext:
{{- toYaml .Values.services.prometheus.containerSecurityContext | nindent 10 }}
{{- else }}
        securityContext:
          readOnlyRootFilesystem: true
{{- end }}
        volumeMounts:
          - name: prometheus
            mountPath: "/prometheus"
          - name: prometheus-config
            mountPath: "/etc/prometheus"
          - name: empty-dir
            mountPath: /tmp
            subPath: tmp-dir
          - name: empty-dir
            mountPath: /var/log
            subPath: log-dir
          - name: prometheus-secret-volume
            mountPath: /var/secrets/prometheus
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret | default "regcred" }}
      securityContext:
        runAsUser: 99
        fsGroup: 99
      serviceAccountName: snorkelflow-sa
      volumes:
      - name: prometheus
        persistentVolumeClaim:
          claimName: {{ .Values.projectName }}-prometheus
      - name: prometheus-config
        configMap:
          name: prometheus-config-config-map
      - name: empty-dir
        emptyDir: {}
      - name: prometheus-secret-volume
        secret:
          secretName: prometheus-secret
{{- end }}