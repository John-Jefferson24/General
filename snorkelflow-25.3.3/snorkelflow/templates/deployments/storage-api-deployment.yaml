{{- $images := .Files.Get "images.json" | fromJson }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    always-pinned: "0"
    project: {{ .Values.projectName }}
    service: storage-api
    snorkel.ai/compute-type: cpu
{{- if or  .Values.services.storageApi.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.storageApi.labels .Values.services.labels) | indent 4 }}
{{- end }}
  name: storage-api
  namespace: {{ .Values.projectName }}
spec:
  replicas: 1
{{- if .Values.services.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ .Values.services.progressDeadlineSeconds }}
{{- end }}
  selector:
    matchLabels:
      project: {{ .Values.projectName }}
      service: storage-api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        always-pinned: "0"
        project: {{ .Values.projectName }}
        service: storage-api
        snorkel.ai/compute-type: cpu
{{- if or .Values.services.storageApi.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.storageApi.labels .Values.services.labels) | indent 8 }}
{{- end }}
    spec:
{{- if or .Values.affinity.binPackAlwaysPinnedPods .Values.affinity.nodeAffinity }}
      affinity:
        {{- if .Values.affinity.binPackAlwaysPinnedPods }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: always-pinned
                operator: In
                values:
                - "1"
            topologyKey: kubernetes.io/hostname
            namespaceSelector: {}
        {{- end }}
        {{- with .Values.affinity.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
      {{- with .Values.affinity.nodeSelectors }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret | default "regcred" }}
      securityContext:
        runAsUser: 99
        fsGroup: 99
      serviceAccountName: snorkelflow-sa
      containers:
      - env:
        - name: SERVICE_TYPE
          value: storage-api
        - name: SNORKEL_FLOW_VERSION
          value: "{{ .Values.version }}"
        - name: DB_MINCONN
          value: "5"
        - name: DB_MAXCONN
          value: "10"
        - name: ENABLE_IPV6
          value: "False"
        - name: SSO_HOST_IP
          value: {{ .Values.traffic.ingresses.services.snorkelflow.urlPrefix }}.{{ .Values.traffic.ingresses.domain }}
{{- if .Values.authentication.jwt.enabled }}
        - name: SSO_ENABLE_JWT_LOGIN
          value: "{{ .Values.authentication.jwt.enabled }}"
{{- else }}
        - name: SSO_ENABLE_JWT_LOGIN
          value: "False"
{{- end }}
{{- if and .Values.authentication.jwt.deployment .Values.authentication.jwt.deployment }}
        - name: SNORKEL_IP_DEPLOYMENT
          value: "{{ .Values.authentication.jwt.deployment }}"
{{- end }}
        - name: LOGGING_STACK
          value: {{ .Values.observability.logging_stack }}
        - name: SNORKELFLOW_MOUNT_DIR
          value: /data
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: TDM_API_URL
          value: http://tdm-api:8686
        - name: AUTHORIZATION_API_URL
          value: http://authorization-api:31314
        - name: REDIS_URL
          value: redis
        - name: TELEGRAF_CADVISOR_URL
          value: telegraf:8186
        - name: TELEGRAF_URL
          value: http://telegraf:8125
{{- if .Values.services.storageApi.secretsFromFile }}
        - name: TDM_CONN_STR_FILE
          value: /etc/secrets/db-secret/tdm_conn_str
{{- else }}
        - name: TDM_CONN_STR
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: tdm_conn_str
{{- end }}
{{- with include "launchDarkly.envVars" . }}
{{ . | indent 8 }}
{{- end }}
{{- if .Values.authentication.oidc.enabled }}
        envFrom:
        - configMapRef:
            name: oidc-configmap
{{- end }}
{{- range $k, $v := (merge .Values.services.storageApi.env .Values.services.env) }}
        - name: {{ $k }}
          value: {{ $v | toString | quote }}
{{- end }}
        args:
        - --host
        - 0.0.0.0
        - --port
        - "31315"
        {{- if .Values.image.imageNames.storage }}
        image: {{ .Values.image.imageNames.storage }}
        {{- else }}
        image: {{ template "snorkelflow.registryPrefix" . }}snorkelai/storage-api:{{ .Values.version }}
        {{- end }}
        {{- if .Values.image.imagePullPolicy }}
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        {{- end }}
        name: storage-api
        {{- if .Values.services.storageApi.containerSecurityContext }}
        securityContext:
          {{- toYaml .Values.services.storageApi.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 31315
        volumeMounts:
        - mountPath: /tmp
          name: empty-dir
          subPath: tmp-dir
        - mountPath: /var/log
          name: empty-dir
          subPath: log-dir
        - mountPath: /data
          name: data
        - mountPath: /etc/auth/jwt
          name: jwt-key-pub
{{- if .Values.services.storageApi.secretsFromFile }}
        - mountPath: /etc/secrets/db-secret
          name: db-secret-volume
          readOnly: true
{{- end }}
{{- with include "logging.mounts" (deepCopy . | merge (dict "service_type" "storage-api")) }}
{{ . | indent 8 }}
{{- end }}
        resources:
{{- if .Values.services.storageApi.resources }}
{{ toYaml .Values.services.storageApi.resources | indent 10 }}
{{- else }}
          requests:
            cpu: "1.0"
            memory: 1.0Gi
          limits:
            cpu: "1.0"
            memory: 1.0Gi
{{- end }}
        readinessProbe:
          httpGet:
            path: /
            port: 31315
          initialDelaySeconds: 3
          periodSeconds: 30
        startupProbe:
          httpGet:
            path: /
            port: 31315
          periodSeconds: 30
          failureThreshold: 120
        livenessProbe:
          httpGet:
            path: /
            port: 31315
          periodSeconds: 30
{{- with include "logging.sidecar" (deepCopy . | merge (dict "service_type" "storage-api")) }}
{{ . | indent 6 }}
{{- end }}
      volumes:
      - name: empty-dir
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: {{ template "snorkelflow.pvcName" . }}
      - name: jwt-key-pub
        secret:
          secretName: jwt-key-pub
{{- if .Values.services.storageApi.secretsFromFile }}
      - name: db-secret-volume
        secret:
          secretName: db-secret
{{- end }}
{{- with include "logging.volumes" (deepCopy . | merge (dict "service_type" "storage-api")) }}
{{ . | indent 6 }}
{{- end }}