{{- $images := .Files.Get "images.json" | fromJson }}
{{- if .Values.services.jupyterhub.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    hub.jupyter.org/network-access-proxy-api: 'true'
    hub.jupyter.org/network-access-proxy-http: 'true'
    hub.jupyter.org/network-access-singleuser: 'true'
    always-pinned: "0"
    project: {{ .Values.projectName }}
    service: jupyterhub
    snorkel.ai/compute-type: cpu
{{- if or .Values.services.jupyterhub.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.jupyterhub.labels .Values.services.labels) | indent 4 }}
{{- end }}
  name: jupyterhub
  namespace: {{ .Values.projectName }}
spec:
  replicas: 1
{{- if .Values.services.progressDeadlineSeconds }}
  progressDeadlineSeconds: {{ .Values.services.progressDeadlineSeconds }}
{{- end }}
  selector:
    matchLabels:
      hub.jupyter.org/network-access-proxy-api: 'true'
      hub.jupyter.org/network-access-proxy-http: 'true'
      hub.jupyter.org/network-access-singleuser: 'true'
      project: {{ .Values.projectName }}
      service: jupyterhub
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        hub.jupyter.org/network-access-proxy-api: 'true'
        hub.jupyter.org/network-access-proxy-http: 'true'
        hub.jupyter.org/network-access-singleuser: 'true'
        always-pinned: "0"
        project: {{ .Values.projectName }}
        service: jupyterhub
        snorkel.ai/compute-type: cpu
{{- if or .Values.services.jupyterhub.labels .Values.services.labels }}
{{ toYaml (merge .Values.services.jupyterhub.labels .Values.services.labels) | indent 8 }}
{{- end }}
    spec:
{{- if or .Values.affinity.binPackAlwaysPinnedPods .Values.affinity.nodeAffinity }}
      affinity:
        {{- if .Values.affinity.binPackAlwaysPinnedPods }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: always-pinned
                operator: In
                values:
                - "1"
            topologyKey: kubernetes.io/hostname
            namespaceSelector: {}
        {{- end }}
        {{- with .Values.affinity.nodeAffinity }}
        nodeAffinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
{{- end }}
      {{- with .Values.affinity.nodeSelectors }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - args:
        - launch_jupyterhub
        - --config
        - /usr/local/etc/jupyterhub/jupyterhubconfig.py
        - --upgrade-db
        env:
        - name: SERVICE_TYPE
          value: jupyterhub
        - name: SNORKEL_FLOW_VERSION
          value: "{{ .Values.version }}"
        - name: POD_NAMESPACE
          value: {{ .Values.projectName }}
        - name: SSO_HOST_IP
          value: {{ .Values.traffic.ingresses.services.snorkelflow.urlPrefix }}.{{ .Values.traffic.ingresses.domain }}
        - name: SNORKELFLOW_MOUNT_DIR
          value: /data
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: TDM_API_URL
          value: http://tdm-api:8686
        - name: JUPYTERHUB_URL
          value: http://jupyterhub-proxy:8001
        - name: MINIO_URL
          value: http://minio:9001
        - name: STUDIO_API_URL
          value: http://studio-api:8484
        - name: TELEGRAF_CADVISOR_URL
          value: telegraf:8186
{{- if .Values.services.jupyterhub.secretsFromFile }}
{{- /*
  # If secretsFromFile is true, proxy_auth_token and client_secret will be set in the jupyterhub_config.py.
  # See the following links for more details.
  # * https://jupyterhub.readthedocs.io/en/0.7.2/getting-started.html#proxy-authentication-token
  # * https://oauthenticator.readthedocs.io/en/latest/reference/api/gen/oauthenticator.generic.html#oauthenticator.generic.GenericOAuthenticator.client_secret
*/}}
        - name: CONFIGPROXY_AUTH_TOKEN_FILE
          value: /usr/local/etc/jupyterhub/secret/hub.config.ConfigurableHTTPProxy.auth_token
        - name: OAUTH_CLIENT_SECRET_FILE
          value: /usr/local/etc/jupyterhub/oidc-secret/client_secret
{{- else }}
        - name: CONFIGPROXY_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: hub.config.ConfigurableHTTPProxy.auth_token
              name: jupyterhub-secret-secret
        - name: OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client_secret
              name: jupyterhub-oidc-secret
{{- end }}
{{- range $k, $v := (merge .Values.services.jupyterhub.env .Values.services.env) }}
        - name: {{ $k }}
          value: {{ $v | toString | quote }}
{{- end }}
        {{- if .Values.image.imageNames.jupyterhub }}
        image: {{ .Values.image.imageNames.jupyterhub }}
        {{- else }}
        image: {{ template "snorkelflow.registryPrefix" . }}{{ $images.docker_hub_repo }}/{{ get $images.custom_images "jupyterhub" }}
        {{- end }}
        name: jupyterhub
        {{- if .Values.services.jupyterhub.containerSecurityContext }}
        securityContext:
          {{- toYaml .Values.services.jupyterhub.containerSecurityContext | nindent 10 }}
        {{- end }}
        ports:
        - containerPort: 8081
        resources:
{{- if .Values.services.jupyterhub.resources }}
{{ toYaml .Values.services.jupyterhub.resources | indent 10 }}
{{- else }}
          requests:
            memory: 1.5Gi
            cpu: "1.0"
          limits:
            memory: 1.5Gi
            cpu: "1.0"
{{- end }}
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/auth/jwt
          name: jwt-key-pub
        - mountPath: /srv/jupyterhub
          name: jupyterhub
        - mountPath: /usr/local/etc/jupyterhub
          name: jupyterhub-jupyterhubconfig-py-volume
        - mountPath: /usr/local/etc/jupyterhub/config
          name: jupyterhub-jupyterhubconfig-py-volume
        - mountPath: /usr/local/etc/jupyterhub/secret
          name: jupyterhub-secret-volume
        - mountPath: /usr/local/etc/jupyterhub/existing-secret
          name: jupyterhub-values-volume
{{- if .Values.services.jupyterhub.secretsFromFile }}
        - mountPath: /usr/local/etc/jupyterhub/oidc-secret
          name: jupyterhub-oidc-secret-volume
          readOnly: true
{{- end }}
      imagePullSecrets:
        - name: {{ .Values.image.imagePullSecret | default "regcred" }}
      securityContext:
        fsGroup: 99
        runAsUser: 99
      serviceAccountName: jupyterhub-sa
      volumes:
      - name: data # hostpath in actual generation
        persistentVolumeClaim:
          claimName: {{ template "snorkelflow.pvcName" . }}
      - name: jwt-key-pub
        secret:
          secretName: jwt-key-pub
      - name: jupyterhub
        persistentVolumeClaim:
          claimName: {{ .Values.projectName }}-jupyterhub
      - configMap:
          name: jupyterhub-jupyterhubconfig-py-config-map
        name: jupyterhub-jupyterhubconfig-py-volume
      - configMap:
          name: jupyterhub-config-config-map
        name: jupyterhub-config-volume
      - name: jupyterhub-secret-volume
        secret:
          secretName: jupyterhub-secret-secret
      - name: jupyterhub-values-volume
        configMap:
          name: jupyterhub-jupyterhubconfig-py-config-map
          items:
          - key: values.yaml
            path: values.yaml
{{- if .Values.services.jupyterhub.secretsFromFile }}
      - name: jupyterhub-oidc-secret-volume
        secret:
          secretName: jupyterhub-oidc-secret
{{- end }}
{{- end }}
