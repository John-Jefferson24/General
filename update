# Token display endpoint - Allow unauthenticated access initially
<Location /get-token>
    # Initially allow access without authentication
    <If "%{QUERY_STRING} =~ /auth=1/">
        # Only require authentication when auth=1 is in the query string
        AuthType openid-connect
        Require valid-user
    </If>
    
    Header set Content-Type "text/html; charset=UTF-8"
    RewriteEngine On
    RewriteRule ^/get-token$ /var/www/html/token.html [L]
</Location>

# Health check endpoint
<Location /health>
    SetHandler server-status
</Location>

# Apply SSO to root path for POST requests
<LocationMatch "^/$">
    AuthType openid-connect
    Require valid-user
    ProxyPreserveHost On
    RequestHeader set X-User-ID "%{REMOTE_USER}e"
    RequestHeader set X-JWT-Token "%{OIDC_id_token}e"
    RequestHeader set X-Original-Model "%{ENV:MODEL_NAME}e"
    
    # Detect browser requests and redirect to token page
    RewriteEngine On
    RewriteCond %{HTTP_USER_AGENT} "Mozilla|Chrome|Safari|Firefox|Edge" [NC]
    RewriteCond %{HTTP_ACCEPT} text/html [NC]
    RewriteCond %{REQUEST_METHOD} GET [NC]
    RewriteRule ^/$ /get-token [R,L]
</LocationMatch>

# Test endpoint (keep only if needed)
<Location /test>
    AuthType None
    Require all granted
    ProxyPreserveHost On
    RequestHeader set X-User-ID "test-user"
    RequestHeader set X-JWT-Token "disabled-for-testing"
    RequestHeader set X-Original-Model "%{ENV:MODEL_NAME}e"
</Location>

# Standard API error responses in OpenAI format
ErrorDocument 400 '{"error": {"message": "Bad request format", "type": "invalid_request_error", "param": null, "code": null}}'
ErrorDocument 401 '{"error": {"message": "Authentication required", "type": "authentication_error", "param": null, "code": null}}'
ErrorDocument 404 '{"error": {"message": "The requested resource was not found", "type": "invalid_request_error", "param": null, "code": null}}'
ErrorDocument 500 '{"error": {"message": "The server had an error processing your request", "type": "server_error", "param": null, "code": null}}'


# Load required modules
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule headers_module modules/mod_headers.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule env_module modules/mod_env.so

# Enable RewriteLog for debugging (comment out in production)
# LogLevel alert rewrite:trace8
# RewriteLog "/var/log/httpd/rewrite.log"
# RewriteLogLevel 9

# IMPORTANT: Extract model name from header and set environment variable
# This must be at the top level before any rewrite rules
SetEnvIf X-Original-Model "(.+)" MODEL_NAME=$1

# Make sure the MODEL_NAME environment variable is available
# to all phases of request processing
PassEnv MODEL_NAME

# Force explicit extraction of model name from headers at beginning of request
<IfModule rewrite_module>
    RewriteEngine On
    RewriteMap lowercase int:tolower
    
    # Extract model from header if present
    RewriteCond %{HTTP:X-Original-Model} (.+)
    RewriteRule ^ - [E=MODEL_NAME:%1,NE]
    
    # Debug for troubleshooting - write model name to response header
    # Uncomment for debugging
    # Header always set X-Debug-Model-Name "%{MODEL_NAME}e" env=MODEL_NAME
</IfModule>

# Routing rules based on MODEL_NAME
<IfModule rewrite_module>
    # Chat Completion Models (OpenAI-compatible /v1/chat/completions)
    RewriteCond %{ENV:MODEL_NAME} =llama-70b [NC,OR]
    RewriteCond %{ENV:MODEL_NAME} =Llama-70b-Instruct [NC]
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:chat]
    
    RewriteCond %{ENV:MODEL_NAME} =mixtral [NC]
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:chat]
    
    RewriteCond %{ENV:MODEL_NAME} =mistral [NC]
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:chat]
    
    # Embedding Models (Triton PyTorch /v2/models/X/generate)
    RewriteCond %{ENV:MODEL_NAME} =jina [NC]
    RewriteRule ^/(.*)$ http://triton-2.apps.svc.cluster.local:8000/v2/models/jina_embedding/generate [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:embedding]
    
    RewriteCond %{ENV:MODEL_NAME} =e5-mistral [NC]
    RewriteRule ^/(.*)$ http://triton-2.apps.svc.cluster.local:8000/v2/models/e5_mistral_embedding/generate [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:embedding]
    
    # Default routing (assume chat completion) as fallback
    RewriteCond %{ENV:MODEL_NAME} ^$
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L,NE]
    RewriteRule ^/(.*)$ - [E=ENDPOINT_TYPE:chat]
</IfModule>

# Proxy settings for streaming
SetEnv proxy-initial-not-pooled 1
SetEnv force-proxy-request-1.0 1
SetEnv proxy-nokeepalive 1
