httpd.conf 

# WSGI configuration for Python middleware
LoadModule wsgi_module modules/mod_wsgi_python3.so
WSGIPassAuthorization On

# Configure WSGI application
WSGIDaemonProcess api user=apache group=apache threads=5 python-home=/usr/bin/python3
WSGIScriptAlias / /var/www/html/api.py

<Directory /var/www/html>
    WSGIProcessGroup api
    WSGIApplicationGroup %{GLOBAL}
    Require all granted
</Directory>

# Public endpoints that don't require authentication
<LocationMatch "^/(token\.html|health)$">
    # Explicitly allow access without authentication
    AuthType None
    Require all granted
    ProxyPreserveHost On
</LocationMatch>

# Redirect browser requests to the root URL to token.html
<Location "/">
    # Only apply to GET requests from browsers
    <If "%{REQUEST_METHOD} == 'GET' && %{HTTP_USER_AGENT} =~ /Mozilla|Chrome|Safari|Edge|Firefox/">
        # Redirect to token.html
        RewriteEngine On
        RewriteRule ^/$ /token.html [R,L]
    </If>
</Location>

# Token page - serve directly from filesystem
<Location "/token.html">
    # Use local token.html file
    ProxyPass !
    RewriteEngine On
    RewriteRule ^/token\.html$ /var/www/html/token.html [L]
</Location>

# Test endpoint - bypass JWT validation
<Location "/test">
    # Set test mode header
    RequestHeader set X-Test-Mode "true"
</Location>

# Set environment variables from headers
SetEnvIf X-Original-Model "(.+)" MODEL_NAME=$1
PassEnv MODEL_NAME

# Debug headers for troubleshooting
<IfModule headers_module>
    Header always set X-Debug-Model-Name "%{MODEL_NAME}e" env=MODEL_NAME
    Header always set X-Debug-Proxy-Status "%{HTTP:X-Proxy-To-Backend}e" env=HTTP_X_PROXY_TO_BACKEND
</IfModule>

# Streaming support
RequestHeader unset Accept-Encoding

apy.py

import os
import json
import logging
import requests
from jwt import decode as jwt_decode, get_unverified_header, InvalidTokenError
from io import BytesIO

# Configure logging with rotation
from logging.handlers import RotatingFileHandler
handler = RotatingFileHandler(
    os.getenv('LOG_FILE', '/var/log/api.log'),
    maxBytes=10*1024*1024,
    backupCount=5
)
logging.basicConfig(handlers=[handler], level=logging.INFO)

# Configuration
JWKS_URL = os.getenv('JWKS_URL', 'https://pingfederate.yourbank.com/.well-known/jwks.json')
AUDIENCE = os.getenv('AUDIENCE', 'your_client_id')
ISSUER = os.getenv('ISSUER', 'https://pingfederate.yourbank.com')
AUTH_CALLBACK_URL = os.getenv('AUTH_CALLBACK_URL', '/auth')

def validate_jwt(token):
    """Validate JWT using PingFederate's JWKS endpoint."""
    try:
        jwks = requests.get(JWKS_URL, timeout=5, verify=True).json()
        header = get_unverified_header(token)
        kid = header['kid']
        key = next(k for k in jwks['keys'] if k['kid'] == kid)
        decoded = jwt_decode(
            token,
            key,
            algorithms=['RS256'],
            audience=AUDIENCE,
            issuer=ISSUER
        )
        return decoded
    except (requests.RequestException, InvalidTokenError, KeyError, StopIteration) as e:
        logging.error(f"JWT validation failed: {str(e)}")
        return None

def error_response(message, status, headers, start_response):
    """Return a standardized error response."""
    logging.error(message)
    start_response(status, headers)
    return [json.dumps({
        "error": {
            "message": message,
            "type": "invalid_request_error",
            "param": None,
            "code": None
        }
    }).encode('utf-8')]

def check_browser_request(environ):
    """Check if the request is coming from a browser."""
    user_agent = environ.get('HTTP_USER_AGENT', '')
    accept = environ.get('HTTP_ACCEPT', '')
    
    is_browser = (
        ('Mozilla' in user_agent or 'Chrome' in user_agent or 
         'Safari' in user_agent or 'Firefox' in user_agent or 'Edge' in user_agent) and
        ('text/html' in accept)
    )
    
    return is_browser

def application(environ, start_response):
    """WSGI application for JWT validation and model routing."""
    path_info = environ.get('PATH_INFO', '')
    request_method = environ.get('REQUEST_METHOD', '')
    logging.info(f"Processing request: {request_method} {path_info}")
    
    # Handle root URL for browser requests
    if path_info == '/' and request_method == 'GET' and check_browser_request(environ):
        logging.info("Browser request to root URL, redirecting to token.html")
        start_response('302 Found', [('Location', '/token.html')])
        return [b'']
    
    # Skip authentication for token page and other public endpoints
    if path_info.startswith('/token.html') or path_info == '/health':
        logging.info(f"Public endpoint: {path_info}, skipping auth")
        # Immediately return empty response, let Apache handle it
        start_response('200 OK', [
            ('Content-Type', 'application/json'),
            ('X-Public-Endpoint', 'true')
        ])
        return [b'']
    
    # Handle API versions in path (/v1/completions, /v1/chat/completions, etc.)
    if path_info.startswith('/v1/'):
        logging.info(f"API versioned endpoint: {path_info}")
        # These are treated the same as root API calls
    
    # Handle test endpoint - skips JWT validation
    if path_info == '/test' or path_info.startswith('/v1/test') or environ.get('HTTP_X_TEST_MODE') == 'true':
        logging.info("Test endpoint detected - bypassing authentication")
        
        # Parse the request body to extract model name
        try:
            content_length = int(environ.get('CONTENT_LENGTH', 0))
            request_body = environ['wsgi.input'].read(content_length)
            environ['wsgi.input'] = BytesIO(request_body)  # Make body available for reuse
            
            data = json.loads(request_body.decode('utf-8')) if request_body else {}
            model_name = data.get('model')
            
            if not model_name:
                return error_response("Missing model field", '400 Bad Request', 
                                    [('Content-Type', 'application/json')], start_response)
            
            # Set MODEL_NAME for Apache routing
            os.environ['MODEL_NAME'] = model_name
            
            # Return with special headers for test mode
            start_response('200 OK', [
                ('Content-Type', 'application/json'),
                ('X-Original-Model', model_name),
                ('X-Test-Mode', 'true'),
                ('X-Proxy-To-Backend', 'true')
            ])
            return [b'']
            
        except (ValueError, json.JSONDecodeError) as e:
            return error_response(f"Invalid JSON: {str(e)}", '400 Bad Request', 
                                [('Content-Type', 'application/json')], start_response)
    
    # Regular request - validate JWT
    headers = [('Content-Type', 'application/json')]
    jwt_token = None
    
    # Check for JWT token in headers
    for key, value in environ.items():
        if key.startswith('HTTP_') and key[5:].lower() == 'x_jwt_token':
            jwt_token = value
            break
    
    # Check Authorization header with Bearer token
    if not jwt_token and 'HTTP_AUTHORIZATION' in environ:
        auth = environ['HTTP_AUTHORIZATION']
        if auth.startswith('Bearer '):
            jwt_token = auth[7:]  # Remove 'Bearer ' prefix
    
    # If no valid token, return 401
    if not jwt_token or not validate_jwt(jwt_token):
        if not jwt_token:
            logging.error("Missing JWT token")
        else:
            logging.error("Invalid JWT token")
            
        # Return 401 with JSON error
        start_response('401 Unauthorized', headers)
        return [json.dumps({
            "error": {
                "message": "Authentication required. Please provide a valid JWT token.",
                "type": "authentication_error"
            }
        }).encode('utf-8')]
    
    # Parse JSON to extract model name
    try:
        content_length = int(environ.get('CONTENT_LENGTH', 0))
        request_body = environ['wsgi.input'].read(content_length)
        environ['wsgi.input'] = BytesIO(request_body)  # Make body available for reuse
        
        data = json.loads(request_body.decode('utf-8')) if request_body else {}
        
        # Extract model name
        model_name = data.get('model')
        if not model_name:
            return error_response("Missing model field", '400 Bad Request', headers, start_response)
        
        # Set MODEL_NAME for Apache routing
        os.environ['MODEL_NAME'] = model_name
        
        # Start response with headers for Apache routing
        start_response('200 OK', [
            ('Content-Type', 'application/json'),
            ('X-Original-Model', model_name),
            ('X-Proxy-To-Backend', 'true')
        ])
        
        logging.info(f"Auth successful, model: {model_name}, path: {path_info}")
        return [b'']  # Empty response - Apache will proxy the request
        
    except (ValueError, json.JSONDecodeError) as e:
        return error_response(f"Invalid JSON: {str(e)}", '400 Bad Request', headers, start_response)

token.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML API Authentication</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 40px auto;
            padding: 0 20px;
            line-height: 1.6;
        }
        .token {
            background: #f5f5f5;
            padding: 15px;
            border: 1px solid #ddd;
            word-break: break-all;
            margin: 20px 0;
            font-family: monospace;
        }
        button, .button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 4px;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }
        button:hover, .button:hover {
            background: #0056b3;
        }
        pre {
            background: #f5f5f5;
            padding: 15px;
            border: 1px solid #ddd;
            overflow-x: auto;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            color: black;
            border-radius: 0;
            margin: 0;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: #ccc;
        }
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
        .show {
            display: block;
        }
        .hidden {
            display: none;
        }
        .note {
            background-color: #e7f3fe;
            border-left: 6px solid #2196F3;
            padding: 10px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <h1>ML API Authentication</h1>
    
    <div id="token-section">
        <p>You need a JWT token to use the ML API.</p>
        
        <!-- Token will be displayed here if authenticated -->
        <div id="token-display" class="hidden">
            <h2>Your JWT Token</h2>
            <p>Use this token to authenticate API requests:</p>
            <div class="token" id="token">%{OIDC_id_token}e</div>
            <button onclick="copyToken()">Copy to Clipboard</button>
        </div>
        
        <!-- Authentication button -->
        <div id="auth-section">
            <h2>Get Your Token</h2>
            <p>Click the button below to authenticate and get your token:</p>
            <a href="/auth" class="button">Authenticate</a>
        </div>
    </div>
    
    <h2>API Usage Examples</h2>
    <div class="note">
        <strong>Note:</strong> These examples use the base URL <code>https://your-api-url.com/</code>. 
        Make sure to replace it with your actual API endpoint. The models available are:
        <ul>
            <li><strong>Chat completions:</strong> llama-70b, mixtral, mistral</li>
            <li><strong>Embeddings:</strong> jina, e5-mistral</li>
        </ul>
    </div>
    
    <div class="tab">
        <button class="tablinks active" onclick="openTab(event, 'Python')">Python</button>
        <button class="tablinks" onclick="openTab(event, 'Curl')">Curl</button>
        <button class="tablinks" onclick="openTab(event, 'JavaScript')">JavaScript</button>
    </div>
    
    <div id="Python" class="tabcontent show">
        <h3>Python Example (OpenAI Client)</h3>
        <pre>
from openai import OpenAI

client = OpenAI(
    api_key="not-needed",  # Not used but required by the client
    base_url="https://your-api-url.com/",  # Base URL, not endpoint-specific
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Chat completion example
response = client.chat.completions.create(
    model="mixtral",
    messages=[{"role": "user", "content": "Hello world"}],
    stream=True  # Streaming is supported!
)

# Print streaming response
for chunk in response:
    print(chunk.choices[0].delta.content or "", end="")
</pre>
        
        <h3>Embedding Example</h3>
        <pre>
from openai import OpenAI

client = OpenAI(
    api_key="not-needed",
    base_url="https://your-api-url.com/",  # Same base URL for all endpoints
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Generate embeddings
response = client.embeddings.create(
    model="jina",
    input=["Hello world", "This is another example"]
)

# Print the embedding vectors
for embedding in response.data:
    print(f"Embedding (length: {len(embedding.embedding)})")
</pre>

        <h3>LangChain Example</h3>
        <pre>
from langchain_openai import ChatOpenAI

chat = ChatOpenAI(
    model_name="mixtral",
    openai_api_key="not-needed",
    openai_api_base="https://your-api-url.com/",  # Base URL here
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Use the model
response = chat.invoke("What is the capital of France?")
print(response.content)
</pre>
    </div>
    
    <div id="Curl" class="tabcontent">
        <h3>Curl Example</h3>
        <pre>
# Chat completion
curl -X POST https://your-api-url.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'

# Embedding
curl -X POST https://your-api-url.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "jina",
    "input": ["Hello world", "This is another example"]
  }'

# You can also use OpenAI-compatible endpoints
curl -X POST https://your-api-url.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'
</pre>
    </div>
    
    <div id="JavaScript" class="tabcontent">
        <h3>JavaScript Example</h3>
        <pre>
// Chat completion
async function getChatCompletion() {
  const response = await fetch('https://your-api-url.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-JWT-Token': 'YOUR_TOKEN_HERE'
    },
    body: JSON.stringify({
      model: 'mixtral',
      messages: [{role: 'user', content: 'Hello world'}]
    })
  });
  
  const data = await response.json();
  console.log(data);
}

// Embedding
async function getEmbedding() {
  const response = await fetch('https://your-api-url.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-JWT-Token': 'YOUR_TOKEN_HERE'
    },
    body: JSON.stringify({
      model: 'jina',
      input: ['Hello world', 'This is another example']
    })
  });
  
  const data = await response.json();
  console.log(data);
}

// Using the OpenAI JS client
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: 'not-needed',
  baseURL: 'https://your-api-url.com/',
  defaultHeaders: {
    'X-JWT-Token': 'YOUR_TOKEN_HERE'
  }
});

async function callApi() {
  const completion = await openai.chat.completions.create({
    model: 'mixtral',
    messages: [{ role: 'user', content: 'Hello world' }],
  });
  
  console.log(completion.choices[0].message.content);
}
</pre>
    </div>

    <h2>Test Endpoint</h2>
    <p>For testing purposes, you can use the <code>/test</code> endpoint which doesn't require authentication:</p>
    <pre>
curl -X POST https://your-api-url.com/test \
  -H "Content-Type: application/json" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'
</pre>

    <script>
        // Check if we have a token
        document.addEventListener("DOMContentLoaded", function() {
            const token = document.getElementById("token").innerText;
            
            if (token && token !== "%{OIDC_id_token}e" && token.trim() !== "") {
                // We have a token - show it
                document.getElementById("token-display").classList.remove("hidden");
                document.getElementById("auth-section").classList.add("hidden");
            } else {
                // No token - show auth button
                document.getElementById("token-display").classList.add("hidden");
                document.getElementById("auth-section").classList.remove("hidden");
            }
        });
        
        // Tab switching
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
        
        // Copy token to clipboard
        function copyToken() {
            const token = document.getElementById("token").innerText;
            navigator.clipboard.writeText(token)
                .then(() => {
                    alert("Token copied to clipboard!");
                })
                .catch(err => {
                    console.error('Could not copy token: ', err);
                });
        }
    </script>
</body>
</html>

routing.conf

# Model routing configuration - managed via ConfigMap
# Load required modules
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule headers_module modules/mod_headers.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule env_module modules/mod_env.so

# Routing rules - only proceed if authentication passed and proxy flag is set
<IfModule rewrite_module>
    RewriteEngine On
    
    # Only proxy requests that have been authenticated and marked for proxying
    RewriteCond %{HTTP:X-Proxy-To-Backend} =true
    
    # Chat Completion Models
    RewriteCond %{ENV:MODEL_NAME} llama-70b [NC]
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L]
    
    RewriteCond %{ENV:MODEL_NAME} mixtral [NC]
    RewriteRule ^/(.*)$ http://triton-3.app.svc.cluster.local:9000/v1/chat/completions [P,L]
    
    RewriteCond %{ENV:MODEL_NAME} mistral [NC]
    RewriteRule ^/(.*)$ http://triton-5.app.svc.cluster.local:9000/v1/chat/completions [P,L]
    
    # Embedding Models
    RewriteCond %{ENV:MODEL_NAME} jina [NC]
    RewriteRule ^/(.*)$ http://triton-2.app.svc.cluster.local:8000/v2/models/jina_embedding/generate [P,L]
    
    RewriteCond %{ENV:MODEL_NAME} e5-mistral [NC]
    RewriteRule ^/(.*)$ http://triton-4.app.svc.cluster.local:8000/v2/models/e5_mistral_embedding/generate [P,L]
    
    # Default routing if no model matched
    RewriteCond %{ENV:MODEL_NAME} .+
    RewriteRule ^/(.*)$ http://triton-1.app.svc.cluster.local:9000/v1/chat/completions [P,L]
</IfModule>

# Proxy settings for streaming compatibility
ProxyPassReverse / http://triton-1.app.svc.cluster.local:9000/
ProxyPassReverse / http://triton-2.app.svc.cluster.local:8000/
ProxyPassReverse / http://triton-3.app.svc.cluster.local:9000/
ProxyPassReverse / http://triton-4.app.svc.cluster.local:8000/
ProxyPassReverse / http://triton-5.app.svc.cluster.local:9000/
ProxyPassReverse / http://triton-6.app.svc.cluster.local:8000/

# Important settings for proxying and streaming
ProxyPreserveHost On
SetEnv proxy-initial-not-pooled 1
SetEnv force-proxy-request-1.0 1
SetEnv proxy-nokeepalive 1

# Logging for debugging
LogLevel warn
# Uncomment for detailed debugging
# LogLevel debug rewrite:trace5
