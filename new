import os
import json
import logging
import requests
from jwt import decode as jwt_decode, get_unverified_header, InvalidTokenError

# Configure logging with rotation
from logging.handlers import RotatingFileHandler
handler = RotatingFileHandler(
    os.getenv('LOG_FILE', '/var/log/api.log'),
    maxBytes=10*1024*1024,
    backupCount=5
)
logging.basicConfig(handlers=[handler], level=logging.INFO)

# Configuration
JWKS_URL = os.getenv('JWKS_URL', 'https://pingfederate.yourbank.com/.well-known/jwks.json')
AUDIENCE = os.getenv('AUDIENCE', 'your_client_id')
ISSUER = os.getenv('ISSUER', 'https://pingfederate.yourbank.com')
REDIRECT_URL = os.getenv('JWT_REDIRECT_URL', '/jwt-callback')
MAX_PAYLOAD_SIZE = 1024 * 1024  # 1MB

def validate_jwt(token):
    """Validate JWT using PingFederate's JWKS endpoint."""
    try:
        jwks = requests.get(JWKS_URL, timeout=5, verify=True).json()
        header = get_unverified_header(token)
        kid = header['kid']
        key = next(k for k in jwks['keys'] if k['kid'] == kid)
        decoded = jwt_decode(
            token,
            key,
            algorithms=['RS256'],
            audience=AUDIENCE,
            issuer=ISSUER
        )
        return decoded
    except (requests.RequestException, InvalidTokenError, KeyError, StopIteration) as e:
        logging.error(f"JWT validation failed: {str(e)}")
        return None

def error_response(message, status, headers):
    """Return a standardized error response."""
    logging.error(message)
    start_response(status, headers)
    return [json.dumps({
        "error": {
            "message": message,
            "type": "invalid_request_error",
            "param": None,
            "code": None
        }
    }).encode('utf-8')]

def application(environ, start_response):
    """WSGI application for JSON processing and backend forwarding."""
    headers = [('Content-Type', 'application/json')]
    
    # Check JWT token
    jwt_token = None
    for key, value in environ.items():
        if key.startswith('HTTP_') and key[5:].lower() == 'x_jwt_token':
            jwt_token = value
            break
    jwt_token = jwt_token or ''
    if not jwt_token:
        logging.error("Missing JWT token")
        headers.append(('Location', REDIRECT_URL))
        start_response('302 Found', headers)
        return [b'']
    if not validate_jwt(jwt_token):
        logging.error("Invalid JWT token")
        headers.append(('Location', REDIRECT_URL))
        start_response('302 Found', headers)
        return [b'']

    # Ensure POST request
    if environ.get('REQUEST_METHOD') != 'POST':
        headers.append(('Allow', 'POST'))
        return error_response("Method not allowed", '405 Method Not Allowed', headers)

    # Validate Content-Type
    if environ.get('CONTENT_TYPE') != 'application/json':
        return error_response("Content-Type must be application/json", '415 Unsupported Media Type', headers)

    # Read JSON payload
    content_length = environ.get('CONTENT_LENGTH')
    if content_length is None or not content_length.isdigit():
        return error_response("Content-Length required", '411 Length Required', headers)
    length = int(content_length)
    if length > MAX_PAYLOAD_SIZE:
        return error_response("Payload too large", '413 Payload Too Large', headers)
    
    try:
        body = environ['wsgi.input'].read(length).decode('utf-8')
        data = json.loads(body) if body else {}
    except (ValueError, json.JSONDecodeError) as e:
        return error_response(f"Invalid JSON: {str(e)}", '400 Bad Request', headers)

    # Extract model name
    model_name = data.get('model') or data.get('config', {}).get('model')
    if not model_name:
        return error_response("Missing model field", '400 Bad Request', headers)

    logging.info(f"Processed model: {model_name}")
    headers.append(('X-Model-Name', model_name))  # Pass model name to backend

    # Return response
    start_response('200 OK', headers)
    return [json.dumps({
        "status": "Request accepted",
        "model": model_name
    }).encode('utf-8')]
