#!/usr/bin/env python3
import json
import sys

def application(environ, start_response):
    # Get request method
    method = environ.get('REQUEST_METHOD', 'GET')
    
    # Add detailed logging
    sys.stderr.write(f"V2 ROUTER: Received {method} request to {environ.get('PATH_INFO', '')}\n")
    
    # Only process POST requests with content
    if method == 'POST':
        try:
            # Log headers for debugging
            content_type = environ.get('CONTENT_TYPE', '')
            sys.stderr.write(f"Content-Type: {content_type}\n")
            
            # Read the request body
            content_length = int(environ.get('CONTENT_LENGTH', 0))
            sys.stderr.write(f"Content-Length: {content_length}\n")
            
            if content_length > 0:
                body = environ['wsgi.input'].read(content_length)
                
                # Log the raw body
                sys.stderr.write(f"Raw request body: {body}\n")
                
                # Parse the JSON
                data = json.loads(body)
                
                # Log the parsed data
                sys.stderr.write(f"Parsed JSON: {data}\n")
                
                # Extract the model name
                model_name = data.get('model', '')
                sys.stderr.write(f"Extracted model name: '{model_name}'\n")
                
                # Determine the redirect URL based on model name
                redirect_url = '/v2'
                if model_name:
                    redirect_url = f'/model/{model_name}/v2'
                    sys.stderr.write(f"Model found, redirecting to: {redirect_url}\n")
                else:
                    sys.stderr.write("NO MODEL NAME FOUND IN REQUEST\n")
            else:
                redirect_url = '/v2'
                sys.stderr.write("Empty request body (Content-Length = 0)\n")
                
        except Exception as e:
            # Log the error and continue to default endpoint
            sys.stderr.write(f"ERROR processing request: {str(e)}\n")
            redirect_url = '/v2'
    else:
        # For non-POST requests, log and redirect to default
        sys.stderr.write(f"Non-POST request ({method}), redirecting to default\n")
        redirect_url = '/v2'
    
    # Log the final redirect URL
    sys.stderr.write(f"Final redirect URL: {redirect_url}\n")
    
    # Redirect to the appropriate endpoint
    start_response('307 Temporary Redirect', [
        ('Location', redirect_url),
        ('Content-Type', 'text/plain'),
    ])
    return [b'Redirecting to endpoint']
