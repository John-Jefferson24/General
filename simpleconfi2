## WORKING MODEL PROXY CONFIGURATION ##

# Load only necessary modules
LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule security2_module modules/mod_security2.so
LoadModule headers_module modules/mod_headers.so

# Logging
LogLevel warn
ErrorLog /var/log/httpd/proxy_error.log
CustomLog /var/log/httpd/proxy_access.log combined

# Global proxy settings
ProxyRequests Off
ProxyPreserveHost On

# Enable ModSecurity to parse JSON and extract the model name
<IfModule mod_security2.c>
    SecRuleEngine On
    SecRequestBodyAccess On
    
    # Enable JSON parsing
    SecRule REQUEST_HEADERS:Content-Type "application/json" \
           "id:1000,phase:1,pass,ctl:requestBodyProcessor=JSON"
    
    # Extract model name - use a simple SecRule that works
    SecRule REQUEST_BODY:model ".*" \
           "id:2000,phase:2,capture,pass,setenv:model=%{TX.0}"
</IfModule>

# Basic model routing - explicitly route to backends based on model name
# Keep this simple with direct ProxyPass rules based on the environment variable

# Default rule - if no specific model matches or no model provided
ProxyPass "/" "http://triton1.internal/v1/chat/completions"
ProxyPassReverse "/" "http://triton1.internal/v1/chat/completions"

# CORS headers for API compatibility
Header always set Access-Control-Allow-Origin "*"
Header always set Access-Control-Allow-Headers "Content-Type, Authorization"
Header always set Access-Control-Allow-Methods "POST, GET, OPTIONS"
Header always set Cache-Control "no-store"

# Debug header - helps to confirm the model extraction is working
Header always set X-Debug-Model "%{model}e" env=model
