<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Model API - JWT Token</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 40px auto;
            padding: 0 20px;
            line-height: 1.6;
        }
        .token {
            background: #f4f4f4;
            padding: 15px;
            border: 1px solid #ccc;
            word-break: break-all;
            margin: 20px 0;
            font-family: monospace;
        }
        button, .button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 4px;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }
        button:hover, .button:hover {
            background: #0056b3;
        }
        pre {
            background: #f4f4f4;
            padding: 15px;
            border: 1px solid #ccc;
            overflow-x: auto;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            color: black;
            border-radius: 0;
            margin: 0;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: #ccc;
        }
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
        .show {
            display: block;
        }
        .hidden {
            display: none;
        }
        .token-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 5px;
            border: 1px solid #dee2e6;
            margin: 20px 0;
        }
        .auth-section {
            text-align: center;
            padding: 20px;
            margin: 20px 0;
            background: #f8f9fa;
            border-radius: 5px;
            border: 1px solid #dee2e6;
        }
        .valid {
            color: #28a745;
            font-weight: bold;
        }
        .expired {
            color: #dc3545;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Model API Authentication</h1>
    
    <!-- Token Section - Only visible when authenticated -->
    <div id="token-section" class="token-section hidden">
        <h2>Your JWT Token</h2>
        <p>Use this token to authenticate with the Model API:</p>
        <div class="token" id="token">%{OIDC_id_token}e</div>
        <div id="token-status"></div>
        <div>
            <button onclick="copyToken()">Copy to Clipboard</button>
            <button onclick="decodeToken()">View Token Details</button>
        </div>
        <div id="token-details" class="hidden">
            <h3>Token Information</h3>
            <pre id="decoded-token"></pre>
        </div>
    </div>
    
    <!-- Authentication Section - Only visible when not authenticated -->
    <div id="auth-section" class="auth-section">
        <h2>Get Your JWT Token</h2>
        <p>To view your JWT token for API authentication, you need to log in:</p>
        <a href="/get-token?auth=1" class="button">Authenticate to Get Your Token</a>
    </div>
    
    <h2>API Usage Examples</h2>
    <div class="tab">
        <button class="tablinks active" onclick="openTab(event, 'Python')">Python</button>
        <button class="tablinks" onclick="openTab(event, 'Curl')">Curl</button>
        <button class="tablinks" onclick="openTab(event, 'JavaScript')">JavaScript</button>
    </div>
    
    <div id="Python" class="tabcontent show">
        <h3>Python Example (OpenAI Client)</h3>
        <pre>
from openai import OpenAI

client = OpenAI(
    api_key="dummy-value-not-used",
    base_url="https://api.example.com/",
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)
# For completions
completion = client.chat.completions.create(
    model="mixtral",
    messages=[{"role": "user", "content": "Hello"}]
)
# For embeddings
embedding = client.embeddings.create(
    model="jina",
    input="Hello world"
)
        </pre>
        
        <h3>LangChain Example</h3>
        <pre>
from langchain_openai import ChatOpenAI

# Initialize the model
chat = ChatOpenAI(
    model="mixtral",
    openai_api_key="dummy-value-not-used",
    openai_api_base="https://api.example.com/",
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Generate a response
response = chat.invoke("What is the capital of France?")
print(response.content)
        </pre>
    </div>
    
    <div id="Curl" class="tabcontent">
        <h3>Curl Example</h3>
        <pre>
# Chat completion
curl -X POST https://api.example.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello"}]
  }'

# Embedding
curl -X POST https://api.example.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "jina",
    "input": "Hello world"
  }'
        </pre>
    </div>
    
    <div id="JavaScript" class="tabcontent">
        <h3>JavaScript Example</h3>
        <pre>
// Chat completion
async function getChatCompletion() {
  const response = await fetch('https://api.example.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-JWT-Token': 'YOUR_TOKEN_HERE'
    },
    body: JSON.stringify({
      model: 'mixtral',
      messages: [{role: 'user', content: 'Hello'}]
    })
  });
  
  const data = await response.json();
  console.log(data);
}
        </pre>
    </div>

    <script>
        // Function to open tabs
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }

        // Function to copy token to clipboard
        function copyToken() {
            const token = document.getElementById("token").innerText;
            navigator.clipboard.writeText(token).then(() => {
                alert("Token copied to clipboard!");
            });
        }

        // Function to decode and display token information
        function decodeToken() {
            const token = document.getElementById("token").innerText;
            try {
                const parts = token.split('.');
                if (parts.length !== 3) {
                    throw new Error("Not a valid JWT token format");
                }
                
                // Parse the payload
                const payload = JSON.parse(atob(parts[1]));
                document.getElementById("decoded-token").textContent = JSON.stringify(payload, null, 2);
                
                // Show the token info section
                document.getElementById("token-details").classList.remove("hidden");
            } catch (e) {
                alert("Error decoding token: " + e.message);
                console.error(e);
            }
        }

        // Check token on page load
        document.addEventListener("DOMContentLoaded", function() {
            const token = document.getElementById("token").innerText;
            const authSection = document.getElementById("auth-section");
            const tokenSection = document.getElementById("token-section");
            
            // Check if token is available and valid
            if (token === "%{OIDC_id_token}e" || token.trim() === "") {
                // No token, show auth section
                authSection.classList.remove("hidden");
                tokenSection.classList.add("hidden");
            } else {
                // Token available, show token section
                authSection.classList.add("hidden");
                tokenSection.classList.remove("hidden");
                
                // Check token expiration
                try {
                    const parts = token.split('.');
                    if (parts.length === 3) {
                        const payload = JSON.parse(atob(parts[1]));
                        const now = Math.floor(Date.now() / 1000);
                        const statusDiv = document.getElementById("token-status");
                        
                        if (payload.exp && payload.exp < now) {
                            statusDiv.innerHTML = `<p class="expired">⚠️ Token expired on ${new Date(payload.exp * 1000).toLocaleString()}</p>`;
                        } else if (payload.exp) {
                            statusDiv.innerHTML = `<p class="valid">✓ Valid until ${new Date(payload.exp * 1000).toLocaleString()}</p>`;
                        }
                    }
                } catch (e) {
                    console.error("Error checking token expiration:", e);
                }
            }
        });
    </script>
</body>
</html>
