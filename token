<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ML API Authentication</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 40px auto;
            padding: 0 20px;
            line-height: 1.6;
        }
        .token {
            background: #f5f5f5;
            padding: 15px;
            border: 1px solid #ddd;
            word-break: break-all;
            margin: 20px 0;
            font-family: monospace;
        }
        button, .button {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-radius: 4px;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }
        button:hover, .button:hover {
            background: #0056b3;
        }
        pre {
            background: #f5f5f5;
            padding: 15px;
            border: 1px solid #ddd;
            overflow-x: auto;
        }
        .tab {
            overflow: hidden;
            border: 1px solid #ccc;
            background-color: #f1f1f1;
        }
        .tab button {
            background-color: inherit;
            float: left;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            color: black;
            border-radius: 0;
            margin: 0;
        }
        .tab button:hover {
            background-color: #ddd;
        }
        .tab button.active {
            background-color: #ccc;
        }
        .tabcontent {
            display: none;
            padding: 6px 12px;
            border: 1px solid #ccc;
            border-top: none;
        }
        .show {
            display: block;
        }
        .hidden {
            display: none;
        }
        .note {
            background-color: #e7f3fe;
            border-left: 6px solid #2196F3;
            padding: 10px;
            margin: 15px 0;
        }
    </style>
</head>
<body>
    <h1>ML API Authentication</h1>
    
    <div id="token-section">
        <p>You need a JWT token to use the ML API.</p>
        
        <!-- Token will be displayed here if authenticated -->
        <div id="token-display" class="hidden">
            <h2>Your JWT Token</h2>
            <p>Use this token to authenticate API requests:</p>
            <div class="token" id="token">%{OIDC_id_token}e</div>
            <button onclick="copyToken()">Copy to Clipboard</button>
        </div>
        
        <!-- Authentication button -->
        <div id="auth-section">
            <h2>Get Your Token</h2>
            <p>Click the button below to authenticate and get your token:</p>
            <a href="/auth" class="button">Authenticate</a>
        </div>
    </div>
    
    <h2>API Usage Examples</h2>
    <div class="note">
        <strong>Note:</strong> These examples use the base URL <code>https://your-api-url.com/</code>. 
        Make sure to replace it with your actual API endpoint. The models available are:
        <ul>
            <li><strong>Chat completions:</strong> llama-70b, mixtral, mistral</li>
            <li><strong>Embeddings:</strong> jina, e5-mistral</li>
        </ul>
    </div>
    
    <div class="tab">
        <button class="tablinks active" onclick="openTab(event, 'Python')">Python</button>
        <button class="tablinks" onclick="openTab(event, 'Curl')">Curl</button>
        <button class="tablinks" onclick="openTab(event, 'JavaScript')">JavaScript</button>
    </div>
    
    <div id="Python" class="tabcontent show">
        <h3>Python Example (OpenAI Client)</h3>
        <pre>
from openai import OpenAI

client = OpenAI(
    api_key="not-needed",  # Not used but required by the client
    base_url="https://your-api-url.com/",  # Base URL, not endpoint-specific
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Chat completion example
response = client.chat.completions.create(
    model="mixtral",
    messages=[{"role": "user", "content": "Hello world"}],
    stream=True  # Streaming is supported!
)

# Print streaming response
for chunk in response:
    print(chunk.choices[0].delta.content or "", end="")
</pre>
        
        <h3>Embedding Example</h3>
        <pre>
from openai import OpenAI

client = OpenAI(
    api_key="not-needed",
    base_url="https://your-api-url.com/",  # Same base URL for all endpoints
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Generate embeddings
response = client.embeddings.create(
    model="jina",
    input=["Hello world", "This is another example"]
)

# Print the embedding vectors
for embedding in response.data:
    print(f"Embedding (length: {len(embedding.embedding)})")
</pre>

        <h3>LangChain Example</h3>
        <pre>
from langchain_openai import ChatOpenAI

chat = ChatOpenAI(
    model_name="mixtral",
    openai_api_key="not-needed",
    openai_api_base="https://your-api-url.com/",  # Base URL here
    default_headers={"X-JWT-Token": "YOUR_TOKEN_HERE"}
)

# Use the model
response = chat.invoke("What is the capital of France?")
print(response.content)
</pre>
    </div>
    
    <div id="Curl" class="tabcontent">
        <h3>Curl Example</h3>
        <pre>
# Chat completion
curl -X POST https://your-api-url.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'

# Embedding
curl -X POST https://your-api-url.com/ \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "jina",
    "input": ["Hello world", "This is another example"]
  }'

# You can also use OpenAI-compatible endpoints
curl -X POST https://your-api-url.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "X-JWT-Token: YOUR_TOKEN_HERE" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'
</pre>
    </div>
    
    <div id="JavaScript" class="tabcontent">
        <h3>JavaScript Example</h3>
        <pre>
// Chat completion
async function getChatCompletion() {
  const response = await fetch('https://your-api-url.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-JWT-Token': 'YOUR_TOKEN_HERE'
    },
    body: JSON.stringify({
      model: 'mixtral',
      messages: [{role: 'user', content: 'Hello world'}]
    })
  });
  
  const data = await response.json();
  console.log(data);
}

// Embedding
async function getEmbedding() {
  const response = await fetch('https://your-api-url.com/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-JWT-Token': 'YOUR_TOKEN_HERE'
    },
    body: JSON.stringify({
      model: 'jina',
      input: ['Hello world', 'This is another example']
    })
  });
  
  const data = await response.json();
  console.log(data);
}

// Using the OpenAI JS client
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: 'not-needed',
  baseURL: 'https://your-api-url.com/',
  defaultHeaders: {
    'X-JWT-Token': 'YOUR_TOKEN_HERE'
  }
});

async function callApi() {
  const completion = await openai.chat.completions.create({
    model: 'mixtral',
    messages: [{ role: 'user', content: 'Hello world' }],
  });
  
  console.log(completion.choices[0].message.content);
}
</pre>
    </div>

    <h2>Test Endpoint</h2>
    <p>For testing purposes, you can use the <code>/test</code> endpoint which doesn't require authentication:</p>
    <pre>
curl -X POST https://your-api-url.com/test \
  -H "Content-Type: application/json" \
  -d '{
    "model": "mixtral",
    "messages": [{"role": "user", "content": "Hello world"}]
  }'
</pre>

    <script>
        // Check if we have a token
        document.addEventListener("DOMContentLoaded", function() {
            const token = document.getElementById("token").innerText;
            
            if (token && token !== "%{OIDC_id_token}e" && token.trim() !== "") {
                // We have a token - show it
                document.getElementById("token-display").classList.remove("hidden");
                document.getElementById("auth-section").classList.add("hidden");
            } else {
                // No token - show auth button
                document.getElementById("token-display").classList.add("hidden");
                document.getElementById("auth-section").classList.remove("hidden");
            }
        });
        
        // Tab switching
        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
        
        // Copy token to clipboard
        function copyToken() {
            const token = document.getElementById("token").innerText;
            navigator.clipboard.writeText(token)
                .then(() => {
                    alert("Token copied to clipboard!");
                })
                .catch(err => {
                    console.error('Could not copy token: ', err);
                });
        }
    </script>
</body>
</html>
