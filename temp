#!/usr/bin/env python3
import json
import sys

def application(environ, start_response):
    # Get request method
    method = environ.get('REQUEST_METHOD', 'GET')
    original_path = environ.get('PATH_INFO', '')
    
    # Only process POST requests
    if method == 'POST':
        try:
            # Read the request body
            content_length = int(environ.get('CONTENT_LENGTH', 0))
            body = environ['wsgi.input'].read(content_length)
            
            # Parse the JSON
            data = json.loads(body)
            
            # Extract the model name
            model_name = data.get('model', '')
            
            # Log for debugging
            print(f"V1 Router - Path: {original_path}, Model: {model_name}")
            sys.stdout.flush()
            
            # If no model specified, return error
            if not model_name:
                print("ERROR: No model specified in request")
                sys.stdout.flush()
                start_response('400 Bad Request', [('Content-Type', 'application/json')])
                return [b'{"error": "No model specified in request"}']
            
            # Redirect to the model-specific endpoint
            redirect_url = f'/model/{model_name}/v1{original_path}'
            start_response('307 Temporary Redirect', [
                ('Location', redirect_url),
                ('Content-Type', 'text/plain'),
            ])
            return [b'Redirecting to model endpoint']
            
        except Exception as e:
            # Log the error and return error response
            print(f"Error processing request: {str(e)}")
            sys.stdout.flush()
            start_response('500 Internal Server Error', [('Content-Type', 'application/json')])
            return [f'{{"error": "Failed to process request: {str(e)}"'.encode('utf-8')]
    
    # For non-POST requests, return method not allowed
    start_response('405 Method Not Allowed', [('Content-Type', 'application/json')])
    return [b'{"error": "Only POST method is supported"}']

# WSGI script mappings
WSGIScriptAliasMatch "^/v1/" "/var/www/wsgi/v1_router.py"
WSGIScriptAlias "/v2" "/var/www/wsgi/v2_router.py"

# v1 endpoint model-specific proxies
ProxyPass "/model/llama70b/v1/" "http://llama-backend:9000/v1/"
ProxyPass "/model/mistral7b/v1/" "http://mistral-backend:9000/v1/"
ProxyPass "/model/mixtral/v1/" "http://mixtral-backend:9000/v1/"
ProxyPass "/model/claude3/v1/" "http://claude-backend:9000/v1/"
ProxyPass "/model/gpt-4/v1/" "http://gpt4-backend:9000/v1/"

# v2 endpoint model-specific proxies
ProxyPass "/model/text-embedding-3-large/v2" "http://embedding-backend:9000/v2/models/text-embedding-3-large/generate"
ProxyPass "/model/text-embedding-3-small/v2" "http://embedding-backend:9000/v2/models/text-embedding-3-small/generate"

# No default fallbacks
